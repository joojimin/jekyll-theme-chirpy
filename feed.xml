<feed xmlns="http://www.w3.org/2005/Atom"> <id></id><title>Joojimin</title><subtitle>"Joo Ji-min" practice field.</subtitle> <updated>2021-07-06T21:52:29+09:00</updated> <author> <name>joojimin</name> <uri></uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 joojimin </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Google Convention을 적용해보자</title><link href="/posts/TECH-JAVA-CODE_STYLE/" rel="alternate" type="text/html" title="Google Convention을 적용해보자" /><published>2021-07-06T21:40:00+09:00</published> <updated>2021-07-06T21:48:10+09:00</updated> <id>/posts/TECH-JAVA-CODE_STYLE/</id> <content src="/posts/TECH-JAVA-CODE_STYLE/" /> <author> <name>joojimin</name> </author> <category term="Tech" /> <category term="CodeConvention" /> <summary> 도입 배경 동일한 코드 스타일을 지원 Github에서 코드가 이쁘게(?) 나온다 (PR시 편리함) google code style guide ( intellJ 기준 ) https://google.github.io/styleguide/javaguide.html xml 다운로드(아래 링크에서 다운) https://github.com/google/styleguide/blob/gh-pages/intellij-java-google-style.xml intelliJ 설정 Preferences -&amp;gt; Code Style 톱니바퀴 -&amp;gt; import scheme -&amp;gt; intelliJ IDEA code style xml 다운받은 xml 파일 import 추가... </summary> </entry> <entry><title>Transactional</title><link href="/posts/TECK-SPRING-TRANSACTIONAL/" rel="alternate" type="text/html" title="Transactional" /><published>2021-06-27T20:00:00+09:00</published> <updated>2021-06-27T22:04:03+09:00</updated> <id>/posts/TECK-SPRING-TRANSACTIONAL/</id> <content src="/posts/TECK-SPRING-TRANSACTIONAL/" /> <author> <name>joojimin</name> </author> <category term="Tech" /> <category term="Spring" /> <summary> [Spring] @Transactional 트랜잭션이란? 2개 이상의 쿼리를 하나의 커넥션으로 묶어 DB에 전송하고, 이 과정에서 에러가 발생할 경우 자동으로 모든 과정을 원래대로 되돌려 놓는다. 하나 이상의 쿼리를 처리할 때 동일한 Connection 객체를 공유하도록 한다. 트랜잭션의 성질 원자성 한 트랜잭션 내에서 실행한 작업들은 하나로 간주한다. 모두성공, 모두실패 일관성 일관성 있는 데이터베이스 상태를 유지한다. 격리성 동시에 실행되는 트랜잭션끼리는 서로 영향이 없어야한다. 지속성 트랜잭션을 성공적으로 마치면, 결과가 항상 저장되어야한다.... </summary> </entry> <entry><title>우아한 캠프 프리코스 1주차 피드백</title><link href="/posts/TECH-JAVA-CONVENTION/" rel="alternate" type="text/html" title="우아한 캠프 프리코스 1주차 피드백" /><published>2021-04-28T23:20:00+09:00</published> <updated>2021-04-28T23:20:00+09:00</updated> <id>/posts/TECH-JAVA-CONVENTION/</id> <content src="/posts/TECH-JAVA-CONVENTION/" /> <author> <name>joojimin</name> </author> <category term="Tech" /> <category term="CodeConvention" /> <summary> 우아한 캠프 프리코스 1주차 피드백 참조 링크 이름을 통해 의도를 드러내라 변수 이름, 함수 이름, 클래스 이름을 짓는데 시간을 투자해라. 연속적인 숫자를 덧붙인 이름(a1,a2…) 불용어(info, Data, a, an, the)를 추가하는 방식은 적절하지 못하다. 축약하지 마라 의도를 드러낼 수 있다면 이름이 길어져도 괜찮다. IDE의 code format 기능을 활용해라 Cmd+Alt+L ( intelliJ + MAC ) space(공백)도 convention이다. for, while, if문 사이의 space도 convention이다. 구현 순서도 convention이다. 상수 또는 클래스 변수 인스턴스 변수 생성자 메소드 반복하지 ... </summary> </entry> <entry><title>2021년 04월 28일, Daily Comment</title><link href="/posts/DAILY_COMMENT-2021-04-28/" rel="alternate" type="text/html" title="2021년 04월 28일, Daily Comment" /><published>2021-04-28T23:00:00+09:00</published> <updated>2021-04-28T23:00:00+09:00</updated> <id>/posts/DAILY_COMMENT-2021-04-28/</id> <content src="/posts/DAILY_COMMENT-2021-04-28/" /> <author> <name>joojimin</name> </author> <category term="DailyComment" /> <category term="2021년 04월" /> <summary> gz 압축하기, 압축풀기 gzip {대상 파일} gzip -d {압축 파일명}.gz squash merge commit a+b+c를 합쳐서 새로운 m을 생성하여 target 브랜치에 추가(merge) commit a+b+c를 합쳐서 새로운 commit abc를 생성하고 target 브랜치에 추가 ( squash and Merge ) feature 브랜치의 commit history를 합쳐서 깔끔하게 만들기위해 사용 </summary> </entry> <entry><title>2021년 04월 20일, Daily Comment</title><link href="/posts/DAILY_COMMENT-2021-04-21/" rel="alternate" type="text/html" title="2021년 04월 20일, Daily Comment" /><published>2021-04-20T15:55:00+09:00</published> <updated>2021-04-20T15:55:00+09:00</updated> <id>/posts/DAILY_COMMENT-2021-04-21/</id> <content src="/posts/DAILY_COMMENT-2021-04-21/" /> <author> <name>joojimin</name> </author> <category term="DailyComment" /> <category term="2021년 04월" /> <summary> git 삭제되어 이미 원격저장소에 올라간 파일 복구하기 참고 자료 git checkout {commit hash code} – {file full path} ex) git checkout e652e1^ – src/main/java/com/example/example.txt commit hash code: 복구하고자하는 파일이 존재하는 커밋 해쉬 코드 file full path: 복구하고자하는 파일의 full path ( classpath부터 ) 파일의 commit hash를 모른다면 git rev-list -n 1 HEAD — {file full path} 둘이 합쳐서 git checkout $(git rev-list -n 1 ... </summary> </entry> </feed>
